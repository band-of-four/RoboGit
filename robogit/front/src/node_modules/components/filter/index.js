import React, {Component} from 'react'
import {connect} from 'react-redux'
import {Link, withRouter} from 'react-router'
import {compose} from 'redux'
import R from 'ramda'
import classNames from 'classnames'

import {
    getActiveCategoryId
} from 'selectors'
import {filterInformations, clearFilter} from "actions";

class Filter extends Component {

    constructor(props) {
        super(props);
        this.state = {
            activeCategory: '',
            min_price: '',
            min_ram: '',
            min_min_voltage: '',
            min_max_voltage: '',
            min_analog_inputs: '',
            min_flashmemory: '',
            min_power: '',
            max_price: '',
            max_ram: '',
            max_min_voltage: '',
            max_max_voltage: '',
            max_analog_inputs: '',
            max_flashmemory: '',
            max_power: ''
        };

        this.handleChange = this.handleChange.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
        this.handleClear = this.handleClear.bind(this);
        this.renderFields = this.renderFields.bind(this);
    }

    renderFields(fields) {
        return fields.map( (key, index) => (
            <div key={index}>
                <br/>
                <label className='topic-filter'>{key}:</label><br/>
                <br/>
                <label className='label-filter'>От:</label>
                <input id={"min_"+key} className='number-filter' type='number' step='0.5' min='0' placeholder='min' onChange={this.handleChange}/>
                <br/>
                <label className='label-filter'>До:</label>
                <input className='number-filter' id={"max_"+key} type='number' step='0.5' min='0' placeholder='max' onChange={this.handleChange}/>
            </div>
        ))
    }

    handleChange(event) {
        switch(event.target.id){
            case 'min_price':
                this.setState(R.merge(this.state, {
                    min_price: event.target.value
                }));
                break;
            case 'min_ram':
                this.setState(R.merge(this.state, {
                    min_ram: event.target.value
                }));
                break;
            case 'min_min_voltage':
                this.setState(R.merge(this.state, {
                    min_min_voltage: event.target.value
                }));
                break;
            case 'min_max_voltage':
                this.setState(R.merge(this.state, {
                    min_max_voltage: event.target.value
                }));
                break;
            case 'min_analog_inputs':
                this.setState(R.merge(this.state, {
                    min_analog_inputs: event.target.value
                }));
                break;
            case 'min_flashmemory':
                this.setState(R.merge(this.state, {
                    min_flashmemory: event.target.value
                }));
                break;
            case 'min_power':
                this.setState(R.merge(this.state, {
                    min_power: event.target.value
                }));
                break;
            case 'max_price':
                this.setState(R.merge(this.state, {
                    max_price: event.target.value
                }));
                break;
            case 'max_ram':
                this.setState(R.merge(this.state, {
                    max_ram: event.target.value
                }));
                break;
            case 'max_min_voltage':
                this.setState(R.merge(this.state, {
                    max_min_voltage: event.target.value
                }));
                break;
            case 'max_max_voltage':
                this.setState(R.merge(this.state, {
                    max_max_voltage: event.target.value
                }));
                break;
            case 'max_analog_inputs':
                this.setState(R.merge(this.state, {
                    max_analog_inputs: event.target.value
                }));
                break;
            case 'max_flashmemory':
                this.setState(R.merge(this.state, {
                    max_flashmemory: event.target.value
                }));
                break;
            case 'max_power':
                this.setState(R.merge(this.state, {
                    max_power: event.target.value
                }));
                break;
            default: break;
        }
    }

    handleSubmit(event) {
        event.preventDefault();
        console.log("FILTER SUBMIT");
        this.props.filterInformations(R.merge(this.state, {
            activeCategory: this.props.activeCategoryId
        }));
    }

    handleClear(){
        console.log("FILTER CLEAR");
        this.props.clearFilter();
    }


    render() {
        const {categories, activeCategoryId} = this.props;
        var fields = ['price'];

        if (activeCategoryId === '1') {
            fields = [
                'price',
                'ram',
                'min_voltage',
                'max_voltage',
                'analog_inputs'
            ];
        }

        if (activeCategoryId === '2') {
            fields = [
                'price',
                'ram',
                'min_voltage',
                'max_voltage',
                'analog_inputs',
                'flashmemory'
            ];
        }

        if (activeCategoryId === '3') {
            fields = [
                'price',
                'min_voltage',
                'max_voltage'
            ];
        }

        if (activeCategoryId === '4') {
            fields = [
                'price',
                'min_voltage',
                'max_voltage',
                'power'
            ];
        }

        if (activeCategoryId === '5' || activeCategoryId === '6') {
            fields = [
                'price'
            ];
        }

        return (
            <div className='well'>
                <h4>Фильтр</h4>
                <div className='list-group'>
                    {this.renderFields(fields)}
                </div>
                <button className="btn-primary" onClick={this.handleSubmit}>Применить</button>
                <button className="btn-primary" onClick={this.handleClear}>Очистить</button>
            </div>
        )
    };
}


const mapDispatchToProps = {
    filterInformations,
    clearFilter
};

const mapStateToProps = (state, ownProps) => ({
    // categories: getFilter(state),
    activeCategoryId: getActiveCategoryId(ownProps)
});

export default compose(
    withRouter,
    connect(mapStateToProps, mapDispatchToProps)
)(Filter)

import R from 'ramda'
import request from 'superagent'
import $ from 'jquery'
import {cleanBasket} from "actions";

export const fetchBasket = async () => {
    const {body} = await request.get(
        '/api/card/get'
    );
    let res = [];
    for (let i = 0; i < body.length; ++i) {
        console.log(i + " " + body[i].information.price);
        for (let j = 0; j < body[i].amount; ++j) res.push(body[i].information.id);
    }
    return res;
};

export const fetchInformations = async () => {
    const {body} = await request.get(
        '/api/information'
    );
    for (let i = 0; i < body.length; ++i) {
        body[i] = body[i].information
    }
    return body;
};

export const loadMoreInformations = async ({offset}) => {
    const {body} = await request.get(
        '/api/information/1' //FIXME
    );
    for (let i = 0; i < body.length; ++i) {
        body[i] = body[i].information
    }
    return body;
};

export const fetchInformationById = async (id) => {
    const {body} = await request.get(
        "/api/information/by_id/" + id
    );
    return body;
};

export const fetchCategories = async () => {
    return [{id: '1', name: 'Контроллеры'}, {id: '2', name: 'Платформы'}, {id: '3', name: 'Сенсоры'},
        { id: '4', name: 'Моторы'}, {id: '5', name: 'Механические детали'}, {id: '6', name: 'Другое'}]
};

export const basketToOrder = async () => {
    const body = await request.post(
        "/api/order/create"
    );
    console.log("body");
    console.dir(body);
    return body;
};

/*
    min_price: '',
    min_ram: '',
    min_min_voltage: '',
    min_max_voltage: '',
    min_analog_inputs: '',
    min_flashmemory: '',
    min_power: '',
    max_price: '',
    max_ram: '',
    max_min_voltage: '',
    max_max_voltage: '',
    max_analog_inputs: '',
    max_flashmemory: '',
    max_power: ''

    {id: '1', name: 'Контроллеры'}, {id: '2', name: 'Платформы'}, {id: '3', name: 'Сенсоры'},
        { id: '4', name: 'Моторы'}, {id: '5', name: 'Механические детали'}, {id: '6', name: 'Другое'}

        @RequestParam(required = false) min_price: Float?,
               @RequestParam(required = false) max_price: Float?,
               @RequestParam(required = false) min_min_voltage: Float?,
               @RequestParam(required = false) max_min_voltage: Float?,
               @RequestParam(required = false) min_max_voltage: Float?,
               @RequestParam(required = false) max_max_voltage: Float?,
               @RequestParam(required = false) min_analog_inputs: Int?,
               @RequestParam(required = false) max_analog_inputs: Int?,
               @RequestParam(required = false) min_flashmemory: Int?,
               @RequestParam(required = false) max_flashmemory: Int?,
               @RequestParam(required = false) min_ram: Int?,
               @RequestParam(required = false) max_ram: Int?
};*/
export const filterInformations = async (filters) => {
    var body=[];
    switch (filters.activeCategory) {
        case '1':
            body = await request.get(
                '/api/controller/filter')
            .query({min_price: filters.min_price})
            .query({max_price: filters.max_price})
            .query({min_min_voltage: filters.min_min_voltage})
            .query({max_min_voltage: filters.max_min_voltage})
            .query({min_max_voltage: filters.min_max_voltage})
            .query({max_max_voltage: filters.max_max_voltage})
            .query({min_analog_inputs: filters.min_analog_inputs})
            .query({max_analog_inputs: filters.max_analog_inputs});
            break;
        case '2':
            body = await request.get(
                '/api/platform/filter')
            .query({min_price: filters.min_price})
            .query({max_price: filters.max_price})
            .query({min_min_voltage: filters.min_min_voltage})
            .query({max_min_voltage: filters.max_min_voltage})
            .query({min_max_voltage: filters.min_max_voltage})
            .query({max_max_voltage: filters.max_max_voltage})
            .query({min_flashmemory: filters.min_flashmemory})
            .query({max_flashmemory: filters.max_flashmemory})
            .query({min_ram: filters.min_ram})
            .query({max_ram: filters.max_ram})
            .query({min_analog_inputs: filters.min_analog_inputs})
            .query({max_analog_inputs: filters.max_analog_inputs});
            break;
        case '3':
            body = await request.get(
                '/api/sensor/filter')
            .query({min_price: filters.min_price})
            .query({max_price: filters.max_price})
            .query({min_min_voltage: filters.min_min_voltage})
            .query({max_min_voltage: filters.max_min_voltage})
            .query({min_max_voltage: filters.min_max_voltage})
            .query({max_max_voltage: filters.max_max_voltage});
            break;
        case '4':
            body = await request.get(
                '/api/motor/filter')
            .query({min_price: filters.min_price})
            .query({max_price: filters.max_price})
            .query({min_min_voltage: filters.min_min_voltage})
            .query({max_min_voltage: filters.max_min_voltage})
            .query({min_max_voltage: filters.min_max_voltage})
            .query({max_max_voltage: filters.max_max_voltage})
            .query({min_power: filters.min_power})
            .query({max_power: filters.max_power});
            break;
        case '5':
            body = await request.get(
                '/api/mechanic_detail/filter')
            .query({min_price: filters.min_price})
            .query({max_price: filters.max_price});
            break;
        case '6':
            body = await request.get(
                '/api/other/filter')
            .query({min_price: filters.min_price})
            .query({max_price: filters.max_price});
            break;
        default:
            body = await request.get(
                '/api/information/filter')
                .query({min_price: filters.min_price})
                .query({max_price: filters.max_price});



    }

    body = body.body;
    for (let i = 0; i < body.length; ++i) {
        body[i] = body[i].id
    }
    return body;
};
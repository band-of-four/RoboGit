import R from 'ramda'

export const getInformationById = (state, id) => {
  return R.prop(id, state.informations);
};

export const getInformations = (state, ownProps) => {
  const activeCategoryId = getActiveCategoryId(ownProps);
  const applySearch = item => R.contains(
    state.informationsPage.search,
    R.prop('name', item)
  );
  const applyCategory = item => R.equals(
    activeCategoryId,
    R.prop('categoryId', item)
  );

  // console.log("AA: "+ state.informationsPage.ids.length);
  // if(state.informationsPage.ids.length > 0){
  //  return  R.compose(
  //      // R.filter(applySearchById),
  //     id => R.map(R.when(id => f(state, id),R.map(id => getInformationById(state, id))), id)
  //  )(state.informationsPage.ids);
  // }
    var res=[];

    for (let i = 0; i <state.informationsPage.ids.length ; i++) {
        var id = state.informationsPage.ids[i];
        var info = getInformationById(state, id);
        console.log('TYPE: '+info.type);
        if(applySearch(info)){
          switch (activeCategoryId) {
              case '1':
                  info.type === 'CONTROLLER'? res.push(info) : null;
                  break;
              case '2':
                  info.type === 'SENSOR'? res.push(info) : null;
                  break;
              case '3':
                  info.type === 'MOTOR'? res.push(info) : null;
                  break;
              case '4':
                  info.type === 'MECHANIC_DETAIL'? res.push(info) : null;
                  break;
              case '5':
                  info.type === 'OTHER'? res.push(info) : null;
                  break;
              default:
                  res.push(info)
          }
        }
    }
    return res;
  // return R.compose(
  //   R.filter(applySearch),
  //   R.when(R.always(activeCategoryId), R.filter(applyCategory)),
  //   R.map(id => getInformationById(state, id))
  // )(state.informationsPage.ids)
};

function f(state, id) {
    console.log("F: "+id);
    console.log("F: "+getInformationById(state, id).type);
    return getInformationById(state, id).type === 'CONTROLLER';
}

export const getRenderedInformationsLength = state => R.length(state.informationsPage.ids);

export const getTotalBasketCount = state => R.length(state.basket);

export const getTotalBasketPrice = state => {
  return R.compose(
    R.sum,
    R.pluck('price'),
    R.map(id => getInformationById(state, id))
  )(state.basket)
};

export const getCategories = state => R.values(state.categories);

export const getActiveCategoryId = ownProps => R.path(['params', 'id'], ownProps);

export const getBasketInformationsWithCount = state => {
  const informationCount = id => R.compose(
    R.length,
    R.filter(basketId => R.equals(id, basketId))
  )(state.basket);
  const informationWithCount = information => R.assoc('count', informationCount(information.id), information);

  const uniqueIds = R.uniq(state.basket);
  return R.compose(
    R.map(informationWithCount),
    R.map(id => getInformationById(state, id))
  )(uniqueIds)
};



import R from 'ramda'

export const getInformationById = (state, id) => R.prop(id, state.informations);

export const getInformations = (state, ownProps) => {
  const activeCategoryId = getActiveCategoryId(ownProps);
  const applySearch = item => R.contains(
    state.informationsPage.search,
    R.prop('name', item)
  );
  const applyCategory = item => R.equals(
    activeCategoryId,
    R.prop('categoryId', item)
  );

  return R.compose(
    R.filter(applySearch),
    R.when(R.always(activeCategoryId), R.filter(applyCategory)),
    R.map(id => getInformationById(state, id))
  )(state.informationsPage.ids)
};

export const getRenderedInformationsLength = state => R.length(state.informationsPage.ids);

export const getTotalBasketCount = state => R.length(state.basket);

export const getTotalBasketPrice = state => {
  return R.compose(
    R.sum,
    R.pluck('price'),
    R.map(id => getInformationById(state, id))
  )(state.basket)
};

export const getCategories = state => R.values(state.categories);

export const getActiveCategoryId = ownProps => R.path(['params', 'id'], ownProps);

export const getBasketInformationsWithCount = state => {
  const informationCount = id => R.compose(
    R.length,
    R.filter(basketId => R.equals(id, basketId))
  )(state.basket);
  const informationWithCount = information => R.assoc('count', informationCount(information.id), information);

  const uniqueIds = R.uniq(state.basket);
  return R.compose(
    R.map(informationWithCount),
    R.map(id => getInformationById(state, id))
  )(uniqueIds)
};
